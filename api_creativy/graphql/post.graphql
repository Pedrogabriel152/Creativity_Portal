type UserPost {
    id: ID!
    user_id: Int!
    post_id: Int!
}

type Post {
    id: ID!
    subtitle: String!
    like: Int!
    image: String
    user_id: Int!
    title: String!
    flag: Boolean
    user: User! @belongsTo
    user_post: [UserPost]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

input PostInput {
    id: ID
    title: String!
    subtitle: String!
    like: Int
    image: Upload
    user_id: Int!
}

extend type Query @guard {
    post(where: _ @whereConditions(columns: ["id", "user_id", "flag"])): Post @find
    posts(
        where: _ @whereConditions(columns: ["user_id", "flag"]),
        orderBy: _ @orderBy(columns: ["created_at"])
    ): [Post]! @paginate(defaultCount: 10)
    mainPost: Post @field(resolver: "App\\GraphQL\\Queries\\PostQuery@mainPost")
    featuredPosts(
        where: _ @whereConditions(columns: ["flag"]),
        orderBy: _ @orderBy(columns: ["created_at"])
    ): [Post!]! @paginate(defaultCount: 5)
}

extend type Mutation @guard {
    createPost(post: PostInput!): Response! @field(resolver: "App\\GraphQL\\Mutations\\PostMutation@create")
    deletePost(id: ID!, user_id: Int!): Response! @field(resolver: "App\\GraphQL\\Mutations\\PostMutation@delete")
    updatePost(id: ID!, user_id: ID!, post: PostInput!): Response! @field(resolver: "App\\GraphQL\\Mutations\\PostMutation@update")
    likePost(id: ID!, user_id: ID!): Response @field(resolver: "App\\GraphQL\\Mutations\\PostMutation@like")
}